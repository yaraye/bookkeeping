/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, EventEmitter, Input, NgZone, Output, HostListener, Renderer2 } from "@angular/core";
import { ComponentFactoryResolver, ViewContainerRef } from '@angular/core';
import { DatePickerDirectiveComponent } from './date-picker-directive.component';
export class DatePickerDirective {
    /**
     * @param {?} ngZone
     * @param {?} renderer
     * @param {?} viewContainer
     * @param {?} componentFactoryResolver
     */
    constructor(ngZone, renderer, viewContainer, componentFactoryResolver) {
        this.ngZone = ngZone;
        this.renderer = renderer;
        this.viewContainer = viewContainer;
        this.componentFactoryResolver = componentFactoryResolver;
        this.dateselected = new EventEmitter();
        this.ngModelChanged = new EventEmitter();
        this.componentRef = null;
        this.pickerLoaded = false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onFocus(event) {
        this.renderer.setStyle(this.viewContainer.element.nativeElement.parentElement, 'position', 'relative');
        let /** @type {?} */ height = this.viewContainer.element.nativeElement.offsetHeight;
        this.viewContainer.clear();
        let /** @type {?} */ componentFactory = this.componentFactoryResolver.resolveComponentFactory(DatePickerDirectiveComponent);
        this.componentRef = this.viewContainer.createComponent(componentFactory);
        this.componentRef.instance.minDate = this.minDate;
        this.componentRef.instance.maxDate = this.maxDate;
        this.componentRef.instance.singleDatePicker = this.singleDatePicker;
        this.componentRef.instance.startDate = this.startDate;
        this.componentRef.instance.endDate = this.endDate;
        let /** @type {?} */ elm = /** @type {?} */ (document.querySelector('.rl-drpicker'));
        elm.setAttribute('style', 'top:' + parseInt(height + 10) + 'px');
        let /** @type {?} */ rect = elm.getBoundingClientRect();
        let /** @type {?} */ l = rect.left;
        let /** @type {?} */ w = rect.width;
        let /** @type {?} */ docH = document.getElementsByTagName("body")[0].offsetHeight;
        let /** @type {?} */ docW = document.getElementsByTagName("body")[0].offsetWidth;
        let /** @type {?} */ isEntirelyVisible = (l + w <= docW);
        if (!isEntirelyVisible) {
            elm.classList.add('edge');
        }
        else {
            elm.classList.remove('edge');
        }
        this.componentRef.instance.close.subscribe(() => {
            this.componentRef.destroy();
        });
        this.componentRef.instance.dateSelected.subscribe((val) => {
            this.dateselected.emit(val);
            this.componentRef.destroy();
            this.pickerLoaded = false;
        });
    }
    /**
     * @param {?} targetElement
     * @return {?}
     */
    onClick(targetElement) {
        if (this.componentRef) {
            const /** @type {?} */ clickedDp = this.componentRef.location.nativeElement.contains(targetElement);
            const /** @type {?} */ clickedInput = this.viewContainer.element.nativeElement == targetElement;
            const /** @type {?} */ inDp = (targetElement.parentElement ? targetElement.parentElement.classList.contains('calendar-row') : false);
            if (!clickedDp && !clickedInput && !inDp) {
                if (this.componentRef) {
                    this.componentRef.destroy();
                }
            }
        }
    }
}
DatePickerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[date-picker]'
            },] },
];
/** @nocollapse */
DatePickerDirective.ctorParameters = () => [
    { type: NgZone },
    { type: Renderer2 },
    { type: ViewContainerRef },
    { type: ComponentFactoryResolver }
];
DatePickerDirective.propDecorators = {
    minDate: [{ type: Input }],
    maxDate: [{ type: Input }],
    singleDatePicker: [{ type: Input }],
    linkedCalendars: [{ type: Input }],
    startDate: [{ type: Input }],
    ngModel: [{ type: Input }],
    endDate: [{ type: Input }],
    dateselected: [{ type: Output }],
    ngModelChanged: [{ type: Output }],
    onFocus: [{ type: HostListener, args: ['focus', ['$event'],] }],
    onClick: [{ type: HostListener, args: ['document:click', ['$event.target'],] }]
};
function DatePickerDirective_tsickle_Closure_declarations() {
    /** @type {?} */
    DatePickerDirective.prototype.minDate;
    /** @type {?} */
    DatePickerDirective.prototype.maxDate;
    /** @type {?} */
    DatePickerDirective.prototype.singleDatePicker;
    /** @type {?} */
    DatePickerDirective.prototype.linkedCalendars;
    /** @type {?} */
    DatePickerDirective.prototype.startDate;
    /** @type {?} */
    DatePickerDirective.prototype.ngModel;
    /** @type {?} */
    DatePickerDirective.prototype.endDate;
    /** @type {?} */
    DatePickerDirective.prototype.dateselected;
    /** @type {?} */
    DatePickerDirective.prototype.ngModelChanged;
    /** @type {?} */
    DatePickerDirective.prototype.componentRef;
    /** @type {?} */
    DatePickerDirective.prototype.pickerLoaded;
    /** @type {?} */
    DatePickerDirective.prototype.ngZone;
    /** @type {?} */
    DatePickerDirective.prototype.renderer;
    /** @type {?} */
    DatePickerDirective.prototype.viewContainer;
    /** @type {?} */
    DatePickerDirective.prototype.componentFactoryResolver;
}

//# sourceMappingURL=data:application/json;base64,