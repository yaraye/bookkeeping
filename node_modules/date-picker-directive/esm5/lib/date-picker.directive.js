/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, EventEmitter, Input, NgZone, Output, HostListener, Renderer2 } from "@angular/core";
import { ComponentFactoryResolver, ViewContainerRef } from '@angular/core';
import { DatePickerDirectiveComponent } from './date-picker-directive.component';
var DatePickerDirective = /** @class */ (function () {
    function DatePickerDirective(ngZone, renderer, viewContainer, componentFactoryResolver) {
        this.ngZone = ngZone;
        this.renderer = renderer;
        this.viewContainer = viewContainer;
        this.componentFactoryResolver = componentFactoryResolver;
        this.dateselected = new EventEmitter();
        this.ngModelChanged = new EventEmitter();
        this.componentRef = null;
        this.pickerLoaded = false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    DatePickerDirective.prototype.onFocus = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        this.renderer.setStyle(this.viewContainer.element.nativeElement.parentElement, 'position', 'relative');
        var /** @type {?} */ height = this.viewContainer.element.nativeElement.offsetHeight;
        this.viewContainer.clear();
        var /** @type {?} */ componentFactory = this.componentFactoryResolver.resolveComponentFactory(DatePickerDirectiveComponent);
        this.componentRef = this.viewContainer.createComponent(componentFactory);
        this.componentRef.instance.minDate = this.minDate;
        this.componentRef.instance.maxDate = this.maxDate;
        this.componentRef.instance.singleDatePicker = this.singleDatePicker;
        this.componentRef.instance.startDate = this.startDate;
        this.componentRef.instance.endDate = this.endDate;
        var /** @type {?} */ elm = /** @type {?} */ (document.querySelector('.rl-drpicker'));
        elm.setAttribute('style', 'top:' + parseInt(height + 10) + 'px');
        var /** @type {?} */ rect = elm.getBoundingClientRect();
        var /** @type {?} */ l = rect.left;
        var /** @type {?} */ w = rect.width;
        var /** @type {?} */ docH = document.getElementsByTagName("body")[0].offsetHeight;
        var /** @type {?} */ docW = document.getElementsByTagName("body")[0].offsetWidth;
        var /** @type {?} */ isEntirelyVisible = (l + w <= docW);
        if (!isEntirelyVisible) {
            elm.classList.add('edge');
        }
        else {
            elm.classList.remove('edge');
        }
        this.componentRef.instance.close.subscribe(function () {
            _this.componentRef.destroy();
        });
        this.componentRef.instance.dateSelected.subscribe(function (val) {
            _this.dateselected.emit(val);
            _this.componentRef.destroy();
            _this.pickerLoaded = false;
        });
    };
    /**
     * @param {?} targetElement
     * @return {?}
     */
    DatePickerDirective.prototype.onClick = /**
     * @param {?} targetElement
     * @return {?}
     */
    function (targetElement) {
        if (this.componentRef) {
            var /** @type {?} */ clickedDp = this.componentRef.location.nativeElement.contains(targetElement);
            var /** @type {?} */ clickedInput = this.viewContainer.element.nativeElement == targetElement;
            var /** @type {?} */ inDp = (targetElement.parentElement ? targetElement.parentElement.classList.contains('calendar-row') : false);
            if (!clickedDp && !clickedInput && !inDp) {
                if (this.componentRef) {
                    this.componentRef.destroy();
                }
            }
        }
    };
    DatePickerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[date-picker]'
                },] },
    ];
    /** @nocollapse */
    DatePickerDirective.ctorParameters = function () { return [
        { type: NgZone },
        { type: Renderer2 },
        { type: ViewContainerRef },
        { type: ComponentFactoryResolver }
    ]; };
    DatePickerDirective.propDecorators = {
        minDate: [{ type: Input }],
        maxDate: [{ type: Input }],
        singleDatePicker: [{ type: Input }],
        linkedCalendars: [{ type: Input }],
        startDate: [{ type: Input }],
        ngModel: [{ type: Input }],
        endDate: [{ type: Input }],
        dateselected: [{ type: Output }],
        ngModelChanged: [{ type: Output }],
        onFocus: [{ type: HostListener, args: ['focus', ['$event'],] }],
        onClick: [{ type: HostListener, args: ['document:click', ['$event.target'],] }]
    };
    return DatePickerDirective;
}());
export { DatePickerDirective };
function DatePickerDirective_tsickle_Closure_declarations() {
    /** @type {?} */
    DatePickerDirective.prototype.minDate;
    /** @type {?} */
    DatePickerDirective.prototype.maxDate;
    /** @type {?} */
    DatePickerDirective.prototype.singleDatePicker;
    /** @type {?} */
    DatePickerDirective.prototype.linkedCalendars;
    /** @type {?} */
    DatePickerDirective.prototype.startDate;
    /** @type {?} */
    DatePickerDirective.prototype.ngModel;
    /** @type {?} */
    DatePickerDirective.prototype.endDate;
    /** @type {?} */
    DatePickerDirective.prototype.dateselected;
    /** @type {?} */
    DatePickerDirective.prototype.ngModelChanged;
    /** @type {?} */
    DatePickerDirective.prototype.componentRef;
    /** @type {?} */
    DatePickerDirective.prototype.pickerLoaded;
    /** @type {?} */
    DatePickerDirective.prototype.ngZone;
    /** @type {?} */
    DatePickerDirective.prototype.renderer;
    /** @type {?} */
    DatePickerDirective.prototype.viewContainer;
    /** @type {?} */
    DatePickerDirective.prototype.componentFactoryResolver;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1waWNrZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vZGF0ZS1waWNrZXItZGlyZWN0aXZlLyIsInNvdXJjZXMiOlsibGliL2RhdGUtcGlja2VyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFpQixTQUFTLEVBQWMsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDOUksT0FBTyxFQUFFLHdCQUF3QixFQUFrQyxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzRyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQzs7SUFpQi9FLDZCQUFvQixNQUFjLEVBQVUsUUFBbUIsRUFBVSxhQUErQixFQUM5RjtRQURVLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQVUsa0JBQWEsR0FBYixhQUFhLENBQWtCO1FBQzlGLDZCQUF3QixHQUF4Qix3QkFBd0I7NEJBTFQsSUFBSSxZQUFZLEVBQUU7OEJBQ2hCLElBQUksWUFBWSxFQUFFOzRCQUM5QixJQUFJOzRCQUNKLEtBQUs7S0FFNkM7Ozs7O0lBR2pFLHFDQUFPOzs7O0lBRFAsVUFDUSxLQUFZO1FBRHBCLGlCQW9DQztRQWxDQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsYUFBYSxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUN2RyxxQkFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQztRQUNuRSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzNCLHFCQUFJLGdCQUFnQixHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FB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UUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNwSCxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ3pDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO29CQUN0QixJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDO2lCQUM3QjthQUNGO1NBQ0Y7S0FFRjs7Z0JBckVGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZUFBZTtpQkFDMUI7Ozs7Z0JBUG1FLE1BQU07Z0JBQXdCLFNBQVM7Z0JBQ3hDLGdCQUFnQjtnQkFBMUUsd0JBQXdCOzs7MEJBUTlCLEtBQUs7MEJBQ0wsS0FBSzttQ0FDTCxLQUFLO2tDQUNMLEtBQUs7NEJBQ0wsS0FBSzswQkFDTCxLQUFLOzBCQUNMLEtBQUs7K0JBQ0wsTUFBTTtpQ0FDTixNQUFNOzBCQU1OLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7MEJBc0NoQyxZQUFZLFNBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxlQUFlLENBQUM7OzhCQTdEbkQ7O1NBUWEsbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBOZ1pvbmUsIE91dHB1dCwgSG9zdExpc3RlbmVyLCBSZW5kZXJlcjIsIFZpZXdDaGlsZCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgQ29tcG9uZW50RmFjdG9yeSwgQ29tcG9uZW50UmVmLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBEYXRlUGlja2VyRGlyZWN0aXZlQ29tcG9uZW50IH0gZnJvbSAnLi9kYXRlLXBpY2tlci1kaXJlY3RpdmUuY29tcG9uZW50JztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2RhdGUtcGlja2VyXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIERhdGVQaWNrZXJEaXJlY3RpdmUge1xyXG4gIEBJbnB1dCgpIG1pbkRhdGU/OiBzdHJpbmc7XHJcbiAgQElucHV0KCkgbWF4RGF0ZT86IHN0cmluZztcclxuICBASW5wdXQoKSBzaW5nbGVEYXRlUGlja2VyPzogYm9vbGVhbjtcclxuICBASW5wdXQoKSBsaW5rZWRDYWxlbmRhcnM/OiBib29sZWFuXHJcbiAgQElucHV0KCkgc3RhcnREYXRlPzogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIG5nTW9kZWw/OiBzdHJpbmc7XHJcbiAgQElucHV0KCkgZW5kRGF0ZT86IHN0cmluZztcclxuICBAT3V0cHV0KCkgZGF0ZXNlbGVjdGVkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSBuZ01vZGVsQ2hhbmdlZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBjb21wb25lbnRSZWYgPSBudWxsO1xyXG4gIHBpY2tlckxvYWRlZCA9IGZhbHNlO1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbmdab25lOiBOZ1pvbmUsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxyXG4gICAgcHJpdmF0ZSBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcikgeyB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2ZvY3VzJywgWyckZXZlbnQnXSlcclxuICBvbkZvY3VzKGV2ZW50OiBFdmVudCkge1xyXG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLnZpZXdDb250YWluZXIuZWxlbWVudC5uYXRpdmVFbGVtZW50LnBhcmVudEVsZW1lbnQsICdwb3NpdGlvbicsICdyZWxhdGl2ZScpO1xyXG4gICAgbGV0IGhlaWdodCA9IHRoaXMudmlld0NvbnRhaW5lci5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xyXG4gICAgdGhpcy52aWV3Q29udGFpbmVyLmNsZWFyKCk7XHJcbiAgICBsZXQgY29tcG9uZW50RmFjdG9yeSA9IHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KERhdGVQaWNrZXJEaXJlY3RpdmVDb21wb25lbnQpO1xyXG4gICAgdGhpcy5jb21wb25lbnRSZWYgPSB0aGlzLnZpZXdDb250YWluZXIuY3JlYXRlQ29tcG9uZW50KGNvbXBvbmVudEZhY3RvcnkpO1xyXG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UubWluRGF0ZSA9IHRoaXMubWluRGF0ZTtcclxuICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLm1heERhdGUgPSB0aGlzLm1heERhdGU7XHJcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5zaW5nbGVEYXRlUGlja2VyID0gdGhpcy5zaW5nbGVEYXRlUGlja2VyO1xyXG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2Uuc3RhcnREYXRlID0gdGhpcy5zdGFydERhdGU7XHJcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5lbmREYXRlID0gdGhpcy5lbmREYXRlO1xyXG5cclxuICAgIGxldCBlbG0gPSA8SFRNTEVsZW1lbnQ+ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJsLWRycGlja2VyJyk7XHJcbiAgICBlbG0uc2V0QXR0cmlidXRlKCdzdHlsZScsICd0b3A6JyArIHBhcnNlSW50KGhlaWdodCArIDEwKSArICdweCcpO1xyXG4gICAgbGV0IHJlY3QgPSBlbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICBsZXQgbCA9IHJlY3QubGVmdDtcclxuICAgIGxldCB3ID0gcmVjdC53aWR0aDtcclxuICAgIGxldCBkb2NIID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJib2R5XCIpWzBdLm9mZnNldEhlaWdodDtcclxuICAgIGxldCBkb2NXID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJib2R5XCIpWzBdLm9mZnNldFdpZHRoO1xyXG4gICAgbGV0IGlzRW50aXJlbHlWaXNpYmxlID0gKGwgKyB3IDw9IGRvY1cpO1xyXG5cclxuICAgIGlmICghaXNFbnRpcmVseVZpc2libGUpIHtcclxuICAgICAgZWxtLmNsYXNzTGlzdC5hZGQoJ2VkZ2UnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGVsbS5jbGFzc0xpc3QucmVtb3ZlKCdlZGdlJyk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5jbG9zZS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICB0aGlzLmNvbXBvbmVudFJlZi5kZXN0cm95KCk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLmRhdGVTZWxlY3RlZC5zdWJzY3JpYmUoKHZhbCkgPT4ge1xyXG4gICAgICB0aGlzLmRhdGVzZWxlY3RlZC5lbWl0KHZhbCk7XHJcbiAgICAgIHRoaXMuY29tcG9uZW50UmVmLmRlc3Ryb3koKTtcclxuICAgICAgdGhpcy5waWNrZXJMb2FkZWQgPSBmYWxzZTtcclxuICAgIH0pO1xyXG5cclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2RvY3VtZW50OmNsaWNrJywgWyckZXZlbnQudGFyZ2V0J10pXHJcbiAgcHVibGljIG9uQ2xpY2sodGFyZ2V0RWxlbWVudCkge1xyXG4gICAgaWYgKHRoaXMuY29tcG9uZW50UmVmKSB7XHJcbiAgICAgIGNvbnN0IGNsaWNrZWREcCA9IHRoaXMuY29tcG9uZW50UmVmLmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQuY29udGFpbnModGFyZ2V0RWxlbWVudCk7XHJcbiAgICAgIGNvbnN0IGNsaWNrZWRJbnB1dCA9IHRoaXMudmlld0NvbnRhaW5lci5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQgPT0gdGFyZ2V0RWxlbWVudDtcclxuICAgICAgY29uc3QgaW5EcCA9ICh0YXJnZXRFbGVtZW50LnBhcmVudEVsZW1lbnQgPyB0YXJnZXRFbGVtZW50LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdjYWxlbmRhci1yb3cnKSA6IGZhbHNlKTtcclxuICAgICAgaWYgKCFjbGlja2VkRHAgJiYgIWNsaWNrZWRJbnB1dCAmJiAhaW5EcCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbXBvbmVudFJlZikge1xyXG4gICAgICAgICAgdGhpcy5jb21wb25lbnRSZWYuZGVzdHJveSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG59XHJcbiJdfQ==