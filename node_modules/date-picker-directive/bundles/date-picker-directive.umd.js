(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('date-picker-directive', ['exports', '@angular/core', '@angular/common'], factory) :
    (factory((global['date-picker-directive'] = {}),global.ng.core,global.ng.common));
}(this, (function (exports,i0,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DatePickerDirectiveService = (function () {
        function DatePickerDirectiveService() {
        }
        DatePickerDirectiveService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        /** @nocollapse */
        DatePickerDirectiveService.ctorParameters = function () { return []; };
        /** @nocollapse */ DatePickerDirectiveService.ngInjectableDef = i0.defineInjectable({ factory: function DatePickerDirectiveService_Factory() { return new DatePickerDirectiveService(); }, token: DatePickerDirectiveService, providedIn: "root" });
        return DatePickerDirectiveService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DatePickerDirectiveComponent = (function () {
        function DatePickerDirectiveComponent() {
            this._mindate = null;
            this._maxdate = null;
            this.singleDatePicker = false;
            // _singleDatePicker: boolean = false;
            // @Input()
            // set singleDatePicker(isSingle) {
            //   if (isSingle) {
            //     this._singleDatePicker = isSingle;
            //   }
            // }
            // get singleDatePicker() {
            //   return this._singleDatePicker;
            // }
            this.linkedCalendars = true;
            this.monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
            this.tmpDate = null;
            this.tmpEndDate = null;
            this.days = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];
            this.focusedInput = 'start';
            this.close = new i0.EventEmitter();
            this.dateSelected = new i0.EventEmitter();
        }
        Object.defineProperty(DatePickerDirectiveComponent.prototype, "minDate", {
            get: /**
             * @return {?}
             */ function () {
                return this._mindate;
            },
            set: /**
             * @param {?} date
             * @return {?}
             */ function (date) {
                if (date) {
                    this._mindate = new Date(date);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatePickerDirectiveComponent.prototype, "maxDate", {
            get: /**
             * @return {?}
             */ function () {
                return this._maxdate;
            },
            set: /**
             * @param {?} date
             * @return {?}
             */ function (date) {
                if (date) {
                    this._maxdate = new Date(date);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatePickerDirectiveComponent.prototype, "startDate", {
            get: /**
             * @return {?}
             */ function () {
                return this._startDate;
            },
            set: /**
             * @param {?} date
             * @return {?}
             */ function (date) {
                if (date) {
                    this._startDate = new Date(date);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatePickerDirectiveComponent.prototype, "endDate", {
            get: /**
             * @return {?}
             */ function () {
                return this._endDate;
            },
            set: /**
             * @param {?} date
             * @return {?}
             */ function (date) {
                if (date) {
                    this._endDate = new Date(date);
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.ranges = [{
                        title: 'Today',
                        period: [new Date(), new Date()]
                    }, {
                        title: 'Yesterday',
                        period: [this.getYesterday(), this.getYesterday()]
                    }, {
                        title: 'Last 7 Days',
                        period: [this.getPast7Days(), new Date()]
                    }, {
                        title: 'Last 30 Days',
                        period: [this.getPast30Days(), new Date()]
                    }, {
                        title: 'This Month',
                        period: [this.getFirstDay(), new Date()]
                    }, {
                        title: 'Last Month',
                        period: [this.getFirstDayPrev(), this.getLastDayPrev()]
                    }];
                if (!this.startDate) {
                    this._startDate = new Date();
                }
                this.leftCalendar = { month: new Date(this.startDate.getTime()), calendar: null };
                if (!this.endDate) {
                    this._endDate = new Date(this.startDate);
                }
                this.rightCalendar = { month: this.getNextMonth(this.endDate), calendar: null };
                this.displayStartDate = this.startDate.toLocaleDateString();
                this.displayEndDate = this.endDate.toLocaleDateString();
                this.renderCalendar('left');
                this.renderCalendar('right');
            };
        /**
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.getYesterday = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ date = new Date();
                date.setDate(date.getDate() - 1);
                return date;
            };
        /**
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.getPast7Days = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ date = new Date();
                date.setDate(date.getDate() - 6);
                return date;
            };
        /**
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.getPast30Days = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ date = new Date();
                date.setDate(date.getDate() - 29);
                return date;
            };
        /**
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.getFirstDay = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ date = new Date();
                return new Date(date.getFullYear(), date.getMonth(), 1);
            };
        /**
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.getFirstDayPrev = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ date = new Date();
                return new Date(date.getFullYear(), (date.getMonth() - 1), 1);
            };
        /**
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.getLastDayPrev = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ date = new Date();
                return new Date(date.getFullYear(), date.getMonth(), 0);
            };
        /**
         * @param {?} month
         * @param {?} year
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.daysInMonth = /**
         * @param {?} month
         * @param {?} year
         * @return {?}
         */
            function (month, year) {
                return new Date(year, month, 0).getDate();
            };
        /**
         * @param {?} date
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.getLastMonth = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                var /** @type {?} */ d = new Date(date.getTime());
                var /** @type {?} */ c = new Date(d.getTime());
                c.setMonth((d.getMonth() - 1));
                return c;
            };
        /**
         * @param {?} date
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.getNextMonth = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                var /** @type {?} */ d = new Date(date.getTime());
                return new Date(d.setMonth(d.getMonth() + 1));
            };
        /**
         * @param {?} date
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.getMonthYear = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return date.getFullYear() + "-" + date.getMonth();
            };
        /**
         * @param {?} d1
         * @param {?} d2
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.isBefore = /**
         * @param {?} d1
         * @param {?} d2
         * @return {?}
         */
            function (d1, d2) {
                return d1 < d2;
            };
        /**
         * @param {?} d1
         * @param {?} d2
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.isAfter = /**
         * @param {?} d1
         * @param {?} d2
         * @return {?}
         */
            function (d1, d2) {
                return d2 < d1;
            };
        /**
         * @param {?} side
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.renderCalendar = /**
         * @param {?} side
         * @return {?}
         */
            function (side) {
                var /** @type {?} */ date = (side == 'left' ? this.leftCalendar.month : this.rightCalendar.month);
                var /** @type {?} */ month = date.getMonth();
                var /** @type {?} */ year = date.getFullYear();
                var /** @type {?} */ daysInMonth = this.daysInMonth(month + 1, year);
                var /** @type {?} */ firstDay = new Date(year, month, 1);
                var /** @type {?} */ lastMonth = this.getLastMonth(firstDay).getMonth();
                var /** @type {?} */ lastYear = this.getLastMonth(firstDay).getFullYear();
                var /** @type {?} */ daysInLastMonth = this.daysInMonth(lastMonth + 1, lastYear);
                var /** @type {?} */ dayOfWeek = firstDay.getDay();
                var /** @type {?} */ calendar = [];
                for (var /** @type {?} */ i = 0; i < 6; i++) {
                    calendar[i] = [];
                }
                var /** @type {?} */ startDay = daysInLastMonth - dayOfWeek + 1;
                if (startDay > daysInLastMonth) {
                    startDay -= 7;
                }
                if (dayOfWeek === 0) {
                    startDay = daysInLastMonth - 6;
                }
                var /** @type {?} */ curDate = new Date(lastYear, lastMonth, startDay);
                for (var /** @type {?} */ i = 0, /** @type {?} */ col_1 = 0, /** @type {?} */ row_1 = 0; i < 42; i++, col_1++, curDate.setDate(curDate.getDate() + 1)) {
                    if (i > 0 && col_1 % 7 === 0) {
                        col_1 = 0;
                        row_1++;
                    }
                    calendar[row_1][col_1] = new Date(curDate.getTime());
                    curDate.setHours(12);
                    if (this.minDate && calendar[row_1][col_1].toLocaleDateString() == this.minDate.toLocaleDateString() && this.isBefore(calendar[row_1][col_1], this.minDate) && side == 'left') {
                        calendar[row_1][col_1] = new Date(this.minDate.getTime());
                    }
                    if (this.maxDate && calendar[row_1][col_1].toLocaleDateString() == this.maxDate.toLocaleDateString() && this.isAfter(calendar[row_1][col_1], this.maxDate) && side == 'right') {
                        calendar[row_1][col_1] = new Date(this.maxDate.getTime());
                    }
                }
                //make the calendar object available to hoverDate/clickDate
                if (side == 'left') {
                    this.leftCalendar.calendar = calendar;
                }
                else {
                    this.rightCalendar.calendar = calendar;
                }
            };
        /**
         * @param {?} day
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.isToday = /**
         * @param {?} day
         * @return {?}
         */
            function (day) {
                if (!day) {
                    return false;
                }
                return new Date().toLocaleDateString() === day.toLocaleDateString();
            };
        /**
         * @param {?} day
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.isActiveDate = /**
         * @param {?} day
         * @return {?}
         */
            function (day) {
                if (day.toLocaleDateString() == this.startDate.toLocaleDateString()) {
                    return true;
                }
                else if (this.endDate && day.toLocaleDateString() == this.endDate.toLocaleDateString()) {
                    return true;
                }
                return false;
            };
        /**
         * @param {?} day
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.isStartDate = /**
         * @param {?} day
         * @return {?}
         */
            function (day) {
                if (day.toLocaleDateString() == this.startDate.toLocaleDateString()) {
                    return true;
                }
                return false;
            };
        /**
         * @param {?} day
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.isEndDate = /**
         * @param {?} day
         * @return {?}
         */
            function (day) {
                if (this.endDate && day.toLocaleDateString() == this.endDate.toLocaleDateString()) {
                    return true;
                }
                return false;
            };
        /**
         * @param {?} day
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.isDisabled = /**
         * @param {?} day
         * @return {?}
         */
            function (day) {
                if (this.minDate && this.isBefore(day, this.minDate)) {
                    return true;
                }
                else if (this.maxDate && this.isAfter(day, this.maxDate)) {
                    return true;
                }
                return false;
            };
        /**
         * @param {?} day
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.isInRange = /**
         * @param {?} day
         * @return {?}
         */
            function (day) {
                if (this.endDate) {
                    if (this.isAfter(day, this.startDate) && this.isBefore(day, this.endDate)) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
                else {
                    if (this.isAfter(day, this.startDate) && this.isBefore(day, this.tmpDate)) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
            };
        /**
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.nextAvailable = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ calendar = (this.singleDatePicker ? this.leftCalendar : this.rightCalendar);
                var /** @type {?} */ lday = new Date(calendar.month.getFullYear(), calendar.month.getMonth() + 1, 0);
                if (!this.maxDate || this.isAfter(this.maxDate, lday)) {
                    return true;
                }
                else {
                    return false;
                }
            };
        /**
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.prevAvailable = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ calendar = this.leftCalendar;
                var /** @type {?} */ fday = new Date(calendar.month.getFullYear(), calendar.month.getMonth(), 1);
                if (!this.minDate || this.isBefore(this.minDate, fday)) {
                    return true;
                }
                else {
                    return false;
                }
            };
        /**
         * @param {?} day
         * @param {?} side
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.notActiveMonth = /**
         * @param {?} day
         * @param {?} side
         * @return {?}
         */
            function (day, side) {
                var /** @type {?} */ cal = (side == 'left' ? this.leftCalendar.calendar : this.rightCalendar.calendar);
                if (day.getMonth() != cal[1][1].getMonth()) {
                    return true;
                }
                return false;
            };
        /**
         * @param {?} side
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.getMonth = /**
         * @param {?} side
         * @return {?}
         */
            function (side) {
                var /** @type {?} */ cal = (side == 'left' ? this.leftCalendar.calendar : this.rightCalendar.calendar);
                return this.monthNames[cal[1][1].getMonth()] + " " + cal[1][1].getFullYear();
            };
        /**
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.clickPrev = /**
         * @return {?}
         */
            function () {
                this.leftCalendar.month.setMonth(this.leftCalendar.month.getMonth() - 1);
                this.renderCalendar('left');
                if (this.rightCalendar.calendar) {
                    this.rightCalendar.month.setMonth(this.rightCalendar.month.getMonth() - 1);
                    this.renderCalendar('right');
                }
            };
        /**
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.clickNext = /**
         * @return {?}
         */
            function () {
                this.leftCalendar.month.setMonth(this.leftCalendar.month.getMonth() + 1);
                this.renderCalendar('left');
                if (this.rightCalendar.calendar) {
                    this.rightCalendar.month.setMonth(this.rightCalendar.month.getMonth() + 1);
                    this.renderCalendar('right');
                }
            };
        /**
         * @param {?} day
         * @param {?} side
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.clickdate = /**
         * @param {?} day
         * @param {?} side
         * @return {?}
         */
            function (day, side) {
                if (this.isDisabled(day)) {
                    return false;
                }
                if (this.endDate || this.isBefore(day, this.startDate)) {
                    this._endDate = null;
                    this.setStartDate(day);
                    if (this.tmpEndDate) {
                        this.setEndDate(this.tmpEndDate);
                    }
                    else {
                        this.focusedInput = 'end';
                    }
                }
                else if (!this.endDate && this.isBefore(day, this.startDate)) {
                    this.setEndDate(this.startDate);
                    this.focusedInput = 'start';
                }
                else {
                    this.setEndDate(day);
                    this.focusedInput = 'start';
                }
                if (this.singleDatePicker) {
                    this.setEndDate(this.startDate);
                    this.focusedInput = 'start';
                    this.dateSelected.emit(this.startDate.toLocaleDateString());
                }
                this.updateView();
            };
        /**
         * @param {?} range
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.rangeClick = /**
         * @param {?} range
         * @return {?}
         */
            function (range) {
                this.setStartDate(range.period[0]);
                this.setEndDate(range.period[1]);
                this.updateView();
                this.applyClick();
            };
        /**
         * @param {?} range
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.rangeHover = /**
         * @param {?} range
         * @return {?}
         */
            function (range) {
                this.displayStartDate = range.period[0].toLocaleDateString();
                this.displayEndDate = range.period[1].toLocaleDateString();
            };
        /**
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.hoverExit = /**
         * @return {?}
         */
            function () {
                this.displayStartDate = this.startDate.toLocaleDateString();
                this.displayEndDate = (this.endDate ? this.endDate.toLocaleDateString() : this.displayStartDate);
            };
        /**
         * @param {?} day
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.hoverdate = /**
         * @param {?} day
         * @return {?}
         */
            function (day) {
                if (this.isDisabled(day)) {
                    return false;
                }
                this.tmpDate = new Date(day.getTime());
                if (this.focusedInput === 'start') {
                    this.displayStartDate = this.tmpDate.toLocaleDateString();
                }
                else {
                    this.displayEndDate = this.tmpDate.toLocaleDateString();
                }
            };
        /**
         * @param {?} side
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.inputFocus = /**
         * @param {?} side
         * @return {?}
         */
            function (side) {
                this.focusedInput = side;
                if (this.endDate) {
                    this.tmpEndDate = new Date(this.endDate.getTime());
                    if (side == 'start') ;
                    else if (side == 'end') {
                        this._endDate = null;
                    }
                }
            };
        /**
         * @param {?} side
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.inputBlur = /**
         * @param {?} side
         * @return {?}
         */
            function (side) {
            };
        /**
         * @param {?} event
         * @param {?} side
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.inputChanged = /**
         * @param {?} event
         * @param {?} side
         * @return {?}
         */
            function (event, side) {
                var /** @type {?} */ val = new Date(event.target.value).toLocaleDateString();
                if (this.isDisabled(val)) {
                    return false;
                }
                if (side === 'start') {
                    this.setStartDate(val);
                }
                else if (side === 'end') {
                    this.setEndDate(val);
                    if (this.isBefore(val, this.startDate)) {
                        this.setStartDate(val);
                    }
                }
                this.updateView();
            };
        /**
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.updateView = /**
         * @return {?}
         */
            function () {
                if (this.endDate) {
                    //if both dates are visible already, do nothing
                    if (!this.singleDatePicker && this.leftCalendar.month && this.rightCalendar.month &&
                        (this.getMonthYear(this.startDate) == this.getMonthYear(this.leftCalendar.month)) || (this.getMonthYear(this.startDate) == this.getMonthYear(this.rightCalendar.month))
                        &&
                            (this.getMonthYear(this.endDate) == this.getMonthYear(this.leftCalendar.month) || this.getMonthYear(this.endDate) == this.getMonthYear(this.rightCalendar.month))) {
                        return;
                    }
                    this.leftCalendar.month = new Date(this.startDate.getTime());
                    if (!this.linkedCalendars && (this.endDate.getMonth() != this.startDate.getMonth() || this.endDate.getFullYear() != this.startDate.getFullYear())) {
                        this.rightCalendar.month = new Date(this.endDate.getTime());
                    }
                    else {
                        this.rightCalendar.month = new Date(this.startDate.getFullYear(), this.startDate.getMonth() + 1, 1);
                    }
                }
                else {
                    if (this.getMonthYear(this.leftCalendar.month) != this.getMonthYear(this.startDate) && this.getMonthYear(this.rightCalendar.month) != this.getMonthYear(this.startDate)) {
                        this.leftCalendar.month = new Date(this.startDate.getTime());
                        this.rightCalendar.month = new Date(this.startDate.getFullYear(), this.startDate.getMonth() + 1, 1);
                    }
                }
                if (this.maxDate && this.linkedCalendars && !this.singleDatePicker && this.rightCalendar.month > this.maxDate) {
                    this.rightCalendar.month = new Date(this.maxDate.getTime());
                    this.leftCalendar.month = new Date(this.maxDate.getFullYear(), this.maxDate.getMonth() - 1, 1);
                }
                this.renderCalendar('left');
                this.renderCalendar('right');
            };
        /**
         * @param {?} startDate
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.setStartDate = /**
         * @param {?} startDate
         * @return {?}
         */
            function (startDate) {
                if (typeof startDate === 'string')
                    this._startDate = new Date(startDate);
                if (typeof startDate === 'object')
                    this._startDate = new Date(startDate.getTime());
                this.displayStartDate = this.startDate.toLocaleDateString();
            };
        /**
         * @param {?} endDate
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.setEndDate = /**
         * @param {?} endDate
         * @return {?}
         */
            function (endDate) {
                if (typeof endDate === 'string')
                    this._endDate = new Date(endDate);
                if (typeof endDate === 'object')
                    this._endDate = new Date(endDate.getTime());
                this.displayEndDate = this.endDate.toLocaleDateString();
                this.tmpEndDate = null;
            };
        /**
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.applyClick = /**
         * @return {?}
         */
            function () {
                this.dateSelected.emit(this.startDate.toLocaleDateString() + ' - ' + this.endDate.toLocaleDateString());
            };
        /**
         * @return {?}
         */
        DatePickerDirectiveComponent.prototype.cancelClick = /**
         * @return {?}
         */
            function () {
                this.close.emit(false);
            };
        DatePickerDirectiveComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'date-picker-directive',
                        template: "<div class=\"rl-drpicker\">\n  <div id=\"range-container\" class=\"column\" *ngIf=\"!singleDatePicker\">\n    <div *ngFor=\"let range of ranges\" class=\"range\" (mouseenter)=\"rangeHover(range)\" (mouseleave)=\"hoverExit()\" (click)=\"rangeClick(range)\">{{range.title}}</div>\n    <div class=\"buttons\">\n      <button class=\"apply\" (click)=\"applyClick()\">Apply</button>\n      <button class=\"cancel\" (click)=\"cancelClick()\">Cancel</button>\n    </div>\n  </div>\n  <div id=\"calendar-container\" class=\"column left\">\n    <div class=\"calendar-input\">\n      <input type=\"text\" placeholder=\"Start Date\" [value]=\"displayStartDate\" [class.focused]=\"focusedInput=='start'\" (change)=\"inputChanged($event, 'start')\"\n        (focus)=\"inputFocus('start')\" (blur)=\"inputBlur('start')\" />\n    </div>\n    <div class=\"calendar-table\">\n      <div class=\"calendar-period\">\n        <div class=\"nav-button prev\" (click)=\"clickPrev()\" *ngIf=\"prevAvailable()\">\n          <i class=\"calendar-nav\"></i>\n        </div>\n        {{getMonth('left')}}\n        <div class=\"nav-button next\" (click)=\"clickNext()\" *ngIf=\"nextAvailable() && singleDatePicker\">\n          <i class=\"calendar-nav\"></i>\n        </div>\n      </div>\n      <div class=\"days-header\">\n        <div class=\"day\" *ngFor=\"let day of days\">{{day}}</div>\n      </div>\n      <div class=\"calendar-row\" *ngFor=\"let row of leftCalendar.calendar\">\n        <div *ngFor=\"let col of row\" [class.today]=\"isToday(col)\" [class.off]=\"notActiveMonth(col, 'left')\" [class.active]=\"isActiveDate(col)\"\n          [class.in-range]=\"isInRange(col)\" [class.disabled]=\"isDisabled(col)\" [ngClass]=\"{'start-date':isStartDate(col), 'end-date':isEndDate(col)}\"\n          (mouseenter)=\"hoverdate(col)\" (mouseleave)=\"hoverExit()\" (click)=\"clickdate(col, 'left')\">{{col.getDate()}}</div>\n      </div>\n    </div>\n  </div>\n  <div id=\"calendar-container\" class=\"column right\" *ngIf=\"!singleDatePicker\">\n    <div class=\"calendar-input\">\n      <input type=\"text\" placeholder=\"End Date\" [value]=\"displayEndDate\" [class.focused]=\"focusedInput=='end'\" (change)=\"inputChanged($event, 'end')\"\n        (focus)=\"inputFocus('end')\" (blur)=\"inputBlur('start')\" />\n    </div>\n    <div class=\"calendar-table\">\n      <div class=\"calendar-period\">\n        <div class=\"nav-button next\" (click)=\"clickNext()\" *ngIf=\"nextAvailable()\">\n          <i class=\"calendar-nav\"></i>\n        </div>\n        {{getMonth('right')}}</div>\n      <div class=\"days-header\">\n        <div class=\"day\" *ngFor=\"let day of days\">{{day}}</div>\n      </div>\n      <div class=\"calendar-row\" *ngFor=\"let row of rightCalendar.calendar\">\n        <div *ngFor=\"let col of row\" [class.today]=\"isToday(col)\" [class.off]=\"notActiveMonth(col, 'right')\" [class.active]=\"isActiveDate(col)\"\n          (mouseleave)=\"hoverExit()\" [class.in-range]=\"isInRange(col)\" [class.disabled]=\"isDisabled(col)\" [ngClass]=\"{'start-date':isStartDate(col), 'end-date':isEndDate(col)}\"\n          (mouseenter)=\"hoverdate(col)\" (click)=\"clickdate(col, 'right')\">{{col.getDate()}}</div>\n      </div>\n    </div>\n  </div>\n</div>\n",
                        styles: [".rl-drpicker{z-index:995;position:absolute;top:5px;left:0;font-family:\"Helvetica Neue\",Helvetica,Arial,sans-serif;display:flex;border:1px solid #eee;background-color:#fff;-webkit-box-shadow:0 6px 12px rgba(0,0,0,.175);box-shadow:0 6px 12px rgba(0,0,0,.175);width:auto;padding:10px;color:#333}.rl-drpicker.edge{right:0 !important;left: auto;}.rl-drpicker>.column{/*display:inline-block;vertical-align:top*/}.rl-drpicker>#range-container{width:140px;margin-right:10px;}.rl-drpicker>#range-container>.range{font-size:11pt;background-color:#f5f5f5;border:1px solid #f5f5f5;color:#08c;padding:5px 12px;margin-bottom:10px;cursor:pointer}.rl-drpicker>#range-container>.range:hover{background-color:#08c;border:1px solid #08c;color:#fff}.rl-drpicker>#calendar-container{margin-right:10px; width:230px;}.rl-drpicker>#calendar-container .calendar-input{padding:0 15px;margin-bottom:10px}.rl-drpicker>#calendar-container .calendar-input>input{width:100%;font-size:10pt;padding:5px 0 5px 5px;border:1px solid #ccc}.rl-drpicker>#calendar-container .calendar-input input.focused{border:1px solid #08c}.rl-drpicker>#calendar-container .calendar-period{text-align:center;font-weight:800;font-size:10pt;margin:7px 10px 3px 15px;line-height:24px;height:24px}.rl-drpicker>#calendar-container .calendar-period .nav-button{height:100%;width:32px;vertical-align:top;text-align:center;cursor:pointer}.rl-drpicker>#calendar-container .calendar-period .nav-button>.calendar-nav{border:solid #333;border-width:0 3px 3px 0;padding:5px;display:inline-block}.rl-drpicker>#calendar-container .calendar-period .nav-button.prev{float:left}.rl-drpicker>#calendar-container .calendar-period .nav-button.prev>.calendar-nav{transform:rotate(135deg);-webkit-transform:rotate(135deg)}.rl-drpicker>#calendar-container .calendar-period .nav-button.next{float:right}.rl-drpicker>#calendar-container .calendar-period .nav-button.next>.calendar-nav{transform:rotate(-45deg);-webkit-transform:rotate(-45deg)}.rl-drpicker>#calendar-container .calendar-period .nav-button:hover .calendar-nav{border:solid #08c;border-width:0 3px 3px 0}.rl-drpicker>#calendar-container .days-header>div{display:inline-block;font-weight:800;font-size:10pt;white-space:nowrap;text-align:center;width:32px;height:32px;line-height:32px}.rl-drpicker>#calendar-container .calendar-row>div{cursor:pointer;display:inline-block;font-weight:500;font-size:10pt;white-space:nowrap;text-align:center;width:32px;height:32px;line-height:32px}.rl-drpicker>#calendar-container .calendar-row>div:hover{background-color:#eee;color:#333}.rl-drpicker>#calendar-container .calendar-row>div.active:not(.off){background-color:#08c!important;color:#fff!important}.rl-drpicker>#calendar-container .calendar-row>div.in-range:not(.off){background-color:#ebf4f8;color:#333}.rl-drpicker>#calendar-container .calendar-row .today:not(.off){background:#b71c1c;color:#fff}.rl-drpicker>#calendar-container .calendar-row .off{color:#999}.rl-drpicker>#calendar-container .calendar-row .disabled{color:#999;text-decoration:line-through}.rl-drpicker>#calendar-container:last-of-type{margin-right:0}.rl-drpicker .buttons{display: flex;justify-content:space-between;}.rl-drpicker .buttons>button{padding:5px 10px;font-size:11pt;cursor:pointer}.rl-drpicker .buttons button.apply{background:#08c;color:#fff;border:1px solid #08c}.rl-drpicker .buttons button.apply:hover{background:#1565c0}.rl-drpicker .buttons button.cancel{background:#eee;border:1px solid #ddd}.rl-drpicker .buttons button.cancel:hover{background:#ccc}.rl-drpicker:before{position:absolute;display:inline-block;top:-9px;border-right:7px solid transparent;border-left:7px solid transparent;border-bottom:9px solid #eee;content:''}.rl-drpicker.edge:before{right:10px;}"]
                    },] },
        ];
        /** @nocollapse */
        DatePickerDirectiveComponent.ctorParameters = function () { return []; };
        DatePickerDirectiveComponent.propDecorators = {
            minDate: [{ type: i0.Input }],
            maxDate: [{ type: i0.Input }],
            singleDatePicker: [{ type: i0.Input }],
            startDate: [{ type: i0.Input }],
            endDate: [{ type: i0.Input }]
        };
        return DatePickerDirectiveComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DatePickerDirective = (function () {
        function DatePickerDirective(ngZone, renderer, viewContainer, componentFactoryResolver) {
            this.ngZone = ngZone;
            this.renderer = renderer;
            this.viewContainer = viewContainer;
            this.componentFactoryResolver = componentFactoryResolver;
            this.dateselected = new i0.EventEmitter();
            this.ngModelChanged = new i0.EventEmitter();
            this.componentRef = null;
            this.pickerLoaded = false;
        }
        /**
         * @param {?} event
         * @return {?}
         */
        DatePickerDirective.prototype.onFocus = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var _this = this;
                this.renderer.setStyle(this.viewContainer.element.nativeElement.parentElement, 'position', 'relative');
                var /** @type {?} */ height = this.viewContainer.element.nativeElement.offsetHeight;
                this.viewContainer.clear();
                var /** @type {?} */ componentFactory = this.componentFactoryResolver.resolveComponentFactory(DatePickerDirectiveComponent);
                this.componentRef = this.viewContainer.createComponent(componentFactory);
                this.componentRef.instance.minDate = this.minDate;
                this.componentRef.instance.maxDate = this.maxDate;
                this.componentRef.instance.singleDatePicker = this.singleDatePicker;
                this.componentRef.instance.startDate = this.startDate;
                this.componentRef.instance.endDate = this.endDate;
                var /** @type {?} */ elm = (document.querySelector('.rl-drpicker'));
                elm.setAttribute('style', 'top:' + parseInt(height + 10) + 'px');
                var /** @type {?} */ rect = elm.getBoundingClientRect();
                var /** @type {?} */ l = rect.left;
                var /** @type {?} */ w = rect.width;
                var /** @type {?} */ docH = document.getElementsByTagName("body")[0].offsetHeight;
                var /** @type {?} */ docW = document.getElementsByTagName("body")[0].offsetWidth;
                var /** @type {?} */ isEntirelyVisible = (l + w <= docW);
                if (!isEntirelyVisible) {
                    elm.classList.add('edge');
                }
                else {
                    elm.classList.remove('edge');
                }
                this.componentRef.instance.close.subscribe(function () {
                    _this.componentRef.destroy();
                });
                this.componentRef.instance.dateSelected.subscribe(function (val) {
                    _this.dateselected.emit(val);
                    _this.componentRef.destroy();
                    _this.pickerLoaded = false;
                });
            };
        /**
         * @param {?} targetElement
         * @return {?}
         */
        DatePickerDirective.prototype.onClick = /**
         * @param {?} targetElement
         * @return {?}
         */
            function (targetElement) {
                if (this.componentRef) {
                    var /** @type {?} */ clickedDp = this.componentRef.location.nativeElement.contains(targetElement);
                    var /** @type {?} */ clickedInput = this.viewContainer.element.nativeElement == targetElement;
                    var /** @type {?} */ inDp = (targetElement.parentElement ? targetElement.parentElement.classList.contains('calendar-row') : false);
                    if (!clickedDp && !clickedInput && !inDp) {
                        if (this.componentRef) {
                            this.componentRef.destroy();
                        }
                    }
                }
            };
        DatePickerDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[date-picker]'
                    },] },
        ];
        /** @nocollapse */
        DatePickerDirective.ctorParameters = function () {
            return [
                { type: i0.NgZone },
                { type: i0.Renderer2 },
                { type: i0.ViewContainerRef },
                { type: i0.ComponentFactoryResolver }
            ];
        };
        DatePickerDirective.propDecorators = {
            minDate: [{ type: i0.Input }],
            maxDate: [{ type: i0.Input }],
            singleDatePicker: [{ type: i0.Input }],
            linkedCalendars: [{ type: i0.Input }],
            startDate: [{ type: i0.Input }],
            ngModel: [{ type: i0.Input }],
            endDate: [{ type: i0.Input }],
            dateselected: [{ type: i0.Output }],
            ngModelChanged: [{ type: i0.Output }],
            onFocus: [{ type: i0.HostListener, args: ['focus', ['$event'],] }],
            onClick: [{ type: i0.HostListener, args: ['document:click', ['$event.target'],] }]
        };
        return DatePickerDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DatePickerModule = (function () {
        function DatePickerModule() {
        }
        DatePickerModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [common.CommonModule
                        ],
                        entryComponents: [DatePickerDirectiveComponent],
                        declarations: [DatePickerDirectiveComponent, DatePickerDirective],
                        exports: [DatePickerDirectiveComponent, DatePickerDirective]
                    },] },
        ];
        return DatePickerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.DatePickerDirectiveService = DatePickerDirectiveService;
    exports.DatePickerDirectiveComponent = DatePickerDirectiveComponent;
    exports.DatePickerDirective = DatePickerDirective;
    exports.DatePickerModule = DatePickerModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,